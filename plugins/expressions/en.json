{
  "expressions.defaultErrorRenderer.errorTitle": "Error in visualisation",
  "expressions.execution.functionDisabled": "Function {fnName} is disabled.",
  "expressions.execution.functionNotFound": "Function {fnName} could not be found.",
  "expressions.functions.createTable.args.idsHelpText": "Column ids to generate in positional order. ID represents the key in the row.",
  "expressions.functions.createTable.args.nameHelpText": "Column names to generate in positional order. Names are not required to be unique, and default to the ID if not provided.",
  "expressions.functions.createTable.args.rowCountText": "The number of empty rows to add to the table, to be assigned a value later",
  "expressions.functions.createTableHelpText": "Creates a datatable with a list of columns, and 1 or more empty rows. To populate the rows, use {mapColumnFn} or {mathColumnFn}.",
  "expressions.functions.cumulativeSum.args.byHelpText": "Column to split the cumulative sum calculation by",
  "expressions.functions.cumulativeSum.args.inputColumnIdHelpText": "Column to calculate the cumulative sum of",
  "expressions.functions.cumulativeSum.args.outputColumnIdHelpText": "Column to store the resulting cumulative sum in",
  "expressions.functions.cumulativeSum.args.outputColumnNameHelpText": "Name of the column to store the resulting cumulative sum in",
  "expressions.functions.cumulativeSum.help": "Calculates the cumulative sum of a column in a data table",
  "expressions.functions.derivative.args.byHelpText": "Column to split the derivative calculation by",
  "expressions.functions.derivative.args.inputColumnIdHelpText": "Column to calculate the derivative of",
  "expressions.functions.derivative.args.outputColumnIdHelpText": "Column to store the resulting derivative in",
  "expressions.functions.derivative.args.outputColumnNameHelpText": "Name of the column to store the resulting derivative in",
  "expressions.functions.derivative.help": "Calculates the derivative of a column in a data table",
  "expressions.functions.font.args.alignHelpText": "The horizontal text alignment.",
  "expressions.functions.font.args.colorHelpText": "The text color.",
  "expressions.functions.font.args.familyHelpText": "An acceptable {css} web font string",
  "expressions.functions.font.args.italicHelpText": "Italicize the text?",
  "expressions.functions.font.args.lHeightHelpText": "The line height in pixels",
  "expressions.functions.font.args.sizeHelpText": "The font size in pixels",
  "expressions.functions.font.args.underlineHelpText": "Underline the text?",
  "expressions.functions.font.args.weightHelpText": "The font weight. For example, {list}, or {end}.",
  "expressions.functions.font.invalidFontWeightErrorMessage": "Invalid font weight: '{weight}'",
  "expressions.functions.font.invalidTextAlignmentErrorMessage": "Invalid text alignment: '{align}'",
  "expressions.functions.fontHelpText": "Create a font style.",
  "expressions.functions.mapColumn.args.copyMetaFromHelpText": "If set, the meta object from the specified column id is copied over to the specified target column. If the column doesn't exist it silently fails.",
  "expressions.functions.mapColumn.args.expressionHelpText": "An expression that is executed on every row, provided with a single-row {DATATABLE} context and returning the cell value.",
  "expressions.functions.mapColumn.args.idHelpText": "An optional id of the resulting column. When no id is provided, the id will be looked up from the existing column by the provided name argument. If no column with this name exists yet, a new column with this name and an identical id will be added to the table.",
  "expressions.functions.mapColumn.args.nameHelpText": "The name of the resulting column. Names are not required to be unique.",
  "expressions.functions.mapColumnHelpText": "Adds a column calculated as the result of other columns. Changes are made only when you provide arguments.See also {alterColumnFn} and {staticColumnFn}.",
  "expressions.functions.math.args.expressionHelpText": "An evaluated {TINYMATH} expression. See {TINYMATH_URL}.",
  "expressions.functions.math.args.onErrorHelpText": "In case the {TINYMATH} evaluation fails or returns NaN, the return value is specified by onError. When `'throw'`, it will throw an exception, terminating expression execution (default).",
  "expressions.functions.math.emptyDatatableErrorMessage": "Empty datatable",
  "expressions.functions.math.emptyExpressionErrorMessage": "Empty expression",
  "expressions.functions.math.executionFailedErrorMessage": "Failed to execute math expression. Check your column names",
  "expressions.functions.math.tooManyResultsErrorMessage": "Expressions must return a single number. Try wrapping your expression in {mean} or {sum}",
  "expressions.functions.mathColumn.args.copyMetaFromHelpText": "If set, the meta object from the specified column id is copied over to the specified target column. If the column doesn't exist it silently fails.",
  "expressions.functions.mathColumn.args.idHelpText": "id of the resulting column. Must be unique.",
  "expressions.functions.mathColumn.args.nameHelpText": "The name of the resulting column. Names are not required to be unique.",
  "expressions.functions.mathColumn.arrayValueError": "Cannot perform math on array values at {name}",
  "expressions.functions.mathColumn.uniqueIdError": "ID must be unique",
  "expressions.functions.mathColumnHelpText": "Adds a column calculated as the result of other columns. Changes are made only when you provide arguments.See also {alterColumnFn} and {staticColumnFn}.",
  "expressions.functions.mathHelpText": "Interprets a {TINYMATH} math expression using a {TYPE_NUMBER} or {DATATABLE} as {CONTEXT}. The {DATATABLE} columns are available by their column name. If the {CONTEXT} is a number it is available as {value}.",
  "expressions.functions.movingAverage.args.byHelpText": "Column to split the moving average calculation by",
  "expressions.functions.movingAverage.args.inputColumnIdHelpText": "Column to calculate the moving average of",
  "expressions.functions.movingAverage.args.outputColumnIdHelpText": "Column to store the resulting moving average in",
  "expressions.functions.movingAverage.args.outputColumnNameHelpText": "Name of the column to store the resulting moving average in",
  "expressions.functions.movingAverage.args.windowHelpText": "The size of window to \"slide\" across the histogram.",
  "expressions.functions.movingAverage.help": "Calculates the moving average of a column in a data table",
  "expressions.functions.overallMetric.args.byHelpText": "Column to split the overall calculation by",
  "expressions.functions.overallMetric.args.inputColumnIdHelpText": "Column to calculate the overall metric of",
  "expressions.functions.overallMetric.args.outputColumnIdHelpText": "Column to store the resulting overall metric in",
  "expressions.functions.overallMetric.args.outputColumnNameHelpText": "Name of the column to store the resulting overall metric in",
  "expressions.functions.overallMetric.help": "Calculates the overall sum, min, max or average of a column in a data table",
  "expressions.functions.overallMetric.metricHelpText": "Metric to calculate",
  "expressions.functions.seriesCalculations.columnConflictMessage": "Specified outputColumnId {columnId} already exists. Please pick another column id.",
  "expressions.functions.theme.args.defaultHelpText": "default value in case theming info is not available.",
  "expressions.functions.theme.args.variableHelpText": "Name of the theme variable to read.",
  "expressions.functions.themeHelpText": "Reads a theme setting.",
  "expressions.functions.uiSetting.args.default": "A default value in case of the parameter is not set.",
  "expressions.functions.uiSetting.args.parameter": "The parameter name.",
  "expressions.functions.uiSetting.error.kibanaRequest": "A KibanaRequest is required to get UI settings on the server. Please provide a request object to the expression execution params.",
  "expressions.functions.uiSetting.error.parameter": "Invalid parameter \"{parameter}\".",
  "expressions.functions.uiSetting.help": "Returns a UI settings parameter value.",
  "expressions.functions.var.help": "Updates the Kibana global context.",
  "expressions.functions.var.name.help": "Specify the name of the variable.",
  "expressions.functions.varset.help": "Updates the Kibana global context.",
  "expressions.functions.varset.name.help": "Specify the name of the variable.",
  "expressions.functions.varset.val.help": "Specify the value for the variable. When unspecified, the input context is used.",
  "expressions.types.number.fromStringConversionErrorMessage": "Can't typecast \"{string}\" string to number"
}